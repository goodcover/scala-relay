schema {
  query: Root
  subscription: Subscription
}

type Root {
  dictionary: [Word]
}

type Word {
  id: String!
  definition: WordDefinition
}

type WordDefinition {
  id: String
  text: String
  image: String
}

scalar ID

type ProposedChangeCancelled {
  userId: String!
  when: Float!
}

input ChangeReviewInput {
  id: String!
  ownerId: String!
  approve: Boolean!
  changeType: String!
  details: String
}

input ChangeReviewInputInput {
  change: ChangeReviewInput!
}

type ConnectedOperator {
  operators: [String!]!
}

type Subscription {
  operators(seed: String!): ConnectedOperator!
}

type Mutation {
  userEvents(input: ChangeReviewInput!): ProposedChangeCancelled!
  userEventsScalar(input: String!): ProposedChangeCancelled!
  userEventsNoInput: ProposedChangeCancelled!
  userEventsComplexInput(input: ChangeReviewInputInput!): ProposedChangeCancelled!
}
